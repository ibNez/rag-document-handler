#!/bin/bash

# RAG Knowledge Base Manager - Setup Script
# This script sets up the development environment and installs dependencies

# Script configuration
SCRIPT_VERSION="2.0"
AUTO_YES=false
DEV_MODE=false
SHOW_HELP=false
VERBOSE=false

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Log / directory configuration
LOG_DIR="logs/setup"

# Spinner / progress indicator
SPINNER_PID=""
start_spinner() {
    local msg="$1"
    local frames='|/-\\'
    local i=0
    echo -ne "${BLUE}$msg...${NC}" >&2
    (
        tput civis 2>/dev/null || true
        while true; do
            printf "\r${BLUE}%s %s${NC}" "$msg" "${frames:i++%${#frames}:1}" >&2
            sleep 0.15
        done
    ) &
    SPINNER_PID=$!
}

stop_spinner() {
    local status=$1
    if [ -n "$SPINNER_PID" ]; then
        kill "$SPINNER_PID" 2>/dev/null || true
        wait "$SPINNER_PID" 2>/dev/null || true
        SPINNER_PID=""
        tput cnorm 2>/dev/null || true
    fi
    if [ "$status" = 0 ]; then
        echo -e "\r${GREEN}‚úÖ $2${NC}"
    else
        echo -e "\r${YELLOW}‚ö†Ô∏è  $2${NC}"
    fi
}

# Help function
show_help() {
    echo "üöÄ RAG Knowledge Base Manager - Setup Script v${SCRIPT_VERSION}"
    echo "============================================="
    echo ""
    echo "USAGE:"
    echo "  ./setup.sh [OPTIONS]"
    echo ""
    echo "OPTIONS:"
    echo "  --all        Install everything without prompts (full automated setup)"
    echo "               ‚Ä¢ Creates virtual environment"
    echo "               ‚Ä¢ Installs all dependencies"
    echo "               ‚Ä¢ Starts all Docker containers (webui, postgres, milvus, ollama)"
    echo "               ‚Ä¢ Sets up all directories and configuration"
    echo ""
    echo "  --dev        Development mode setup (containers only, no webui)"
    echo "               ‚Ä¢ Creates virtual environment"
    echo "               ‚Ä¢ Installs all dependencies"
    echo "               ‚Ä¢ Starts only postgres and milvus containers"
    echo "               ‚Ä¢ Skips webui container for local development"
    echo "               ‚Ä¢ Sets up all directories and configuration"
    echo ""
    echo "  --help       Show this help message and exit"
    echo "  --verbose    Show full pip output and retain logs (pip_install_*.log)"
    echo ""
    echo "EXAMPLES:"
    echo "  ./setup.sh              # Interactive setup with prompts"
    echo "  ./setup.sh --all        # Fully automated setup"
    echo "  ./setup.sh --dev        # Setup for local development"
    echo "  ./setup.sh --help       # Show this help"
    echo ""
    echo "WHAT GETS INSTALLED:"
    echo "  üì¶ Python virtual environment (.venv)"
    echo "  üìö Python dependencies (Flask, Milvus, PostgreSQL, etc.)"
    echo "  üóÇÔ∏è  Required directories (staging, uploaded, logs, databases)"
    echo "  üê≥ Docker containers:"
    echo "      ‚Ä¢ postgres:15      (metadata database)"
    echo "      ‚Ä¢ milvus:v2.4.13   (vector database)"
    echo "      ‚Ä¢ ollama:latest    (local LLM server)"
    echo "      ‚Ä¢ webui            (web interface) - only with --all"
    echo ""
    echo "AFTER SETUP:"
    echo "  üåê Web interface: http://localhost:3000 (if webui container running)"
    echo "  üîß Local development: source .venv/bin/activate && python app.py"
    echo "  üìä Status check: ./status.sh"
    echo "  üóëÔ∏è  Cleanup: ./uninstall.sh"
    echo ""
    exit 0
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --all)
            AUTO_YES=true
            shift
            ;;
        --dev)
            DEV_MODE=true
            shift
            ;;
        --help)
            SHOW_HELP=true
            shift
            ;;
        --verbose)
            VERBOSE=true
            shift
            ;;
        *)
            echo "‚ùå Unknown option: $1"
            echo "   Run './setup.sh --help' for usage information"
            exit 1
            ;;
    esac
done

# Show help if requested
if [ "$SHOW_HELP" = true ]; then
    show_help
fi

# Function to ask yes/no questions (respects --all flag)
ask_yes_no() {
    local question="$1"
    local default="$2"
    
    if [ "$AUTO_YES" = true ]; then
        echo -e "${BLUE}$question${NC} (auto-yes)"
        return 0
    fi
    
    while true; do
        if [ "$default" = "y" ]; then
            read -r -p "$(echo -e ${BLUE}$question${NC}) (Y/n): " answer
            answer=${answer:-y}
        else
            read -r -p "$(echo -e ${BLUE}$question${NC}) (y/N): " answer
            answer=${answer:-n}
        fi
        
        case $answer in
            [Yy]* ) return 0;;
            [Nn]* ) return 1;;
            * ) echo "Please answer yes or no.";;
        esac
    done
}

# Print setup mode
echo "üöÄ RAG Knowledge Base Manager - Setup Script v${SCRIPT_VERSION}"
echo "======================================================="

if [ "$AUTO_YES" = true ]; then
    echo -e "${GREEN}ü§ñ Mode: Fully Automated Setup${NC}"
    echo "   Installing all components without prompts..."
elif [ "$DEV_MODE" = true ]; then
    echo -e "${YELLOW}üë®‚Äçüíª Mode: Development Setup${NC}"
    echo "   Installing for local development (no webui container)..."
else
    echo -e "${BLUE}üîß Mode: Interactive Setup${NC}"
    echo "   You will be prompted for each component..."
fi
echo ""

# Check if Python 3.8+ is available
echo "üêç Checking Python installation..."
python3 --version >/dev/null 2>&1
if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Python 3 is required but not installed.${NC}"
    echo "   Please install Python 3.8+ and try again."
    exit 1
fi

PYTHON_VERSION=$(python3 -c 'import sys; print(".".join(map(str, sys.version_info[:2])))')
echo -e "${GREEN}‚úÖ Python $PYTHON_VERSION found${NC}"

# Create virtual environment if it doesn't exist
if [ ! -d ".venv" ]; then
    echo "üì¶ Creating virtual environment..."
    python3 -m venv .venv
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Virtual environment created${NC}"
    else
        echo -e "${RED}‚ùå Failed to create virtual environment${NC}"
        exit 1
    fi
else
    echo -e "${GREEN}‚úÖ Virtual environment already exists${NC}"
fi

# Activate virtual environment
echo "üîß Activating virtual environment..."
source .venv/bin/activate

# Ensure directory structure (moved earlier so logs can be captured inside logs/)
echo "üìÅ Setting up directory structure..."
directories=("staging" "uploaded" "deleted" "logs" "databases/milvus/db" "databases/milvus/conf" "databases/postgres" "containers/ollama" "logs/milvus" "logs/postgres" "logs/ollama" "$LOG_DIR")
for dir in "${directories[@]}"; do
    if [ ! -d "$dir" ]; then
        mkdir -p "$dir"
        echo "   ‚úÖ Created: $dir"
    else
        echo "   ‚úÖ Exists: $dir"
    fi
done

# Upgrade pip
echo "‚¨ÜÔ∏è Upgrading pip..."
if [ "$VERBOSE" = true ]; then
    pip install --upgrade pip || echo -e "${YELLOW}‚ö†Ô∏è  Pip upgrade reported warnings/errors (continuing)${NC}"
else
    if ! pip install --upgrade pip > "$LOG_DIR/pip_upgrade.log" 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è  Pip upgrade had issues (see $LOG_DIR/pip_upgrade.log)${NC}"
    fi
fi

# Install dependencies (with spinner in non-verbose mode)
echo "üìö Installing Python dependencies (editable mode)..."
PRIMARY_LOG="$LOG_DIR/pip_install_primary.log"
FALLBACK_LOG="$LOG_DIR/pip_install_fallback.log"

if [ "$VERBOSE" = true ]; then
    echo "(verbose) pip install -e ."
    if pip install -e . 2>&1 | tee "$PRIMARY_LOG"; then
        echo -e "${GREEN}‚úÖ Dependencies installed successfully${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Primary installation failed. Attempting fallback explicit package set...${NC}"
        echo "Fallback: core explicit packages" | tee "$FALLBACK_LOG"
        if pip install flask pymilvus sentence-transformers werkzeug python-dotenv pypdf python-docx chardet requests beautifulsoup4 google-api-python-client google-auth psycopg2-binary 2>&1 | tee -a "$FALLBACK_LOG"; then
            echo -e "${GREEN}‚úÖ Fallback dependencies installed${NC}"
        else
            echo -e "${RED}‚ùå Fallback installation failed. Review $FALLBACK_LOG${NC}"
            exit 1
        fi
    fi
else
    start_spinner "Resolving & installing Python packages"
    if pip install -e . > "$PRIMARY_LOG" 2>&1; then
        stop_spinner 0 "Dependencies installed"
        echo -e "${BLUE}‚ÑπÔ∏è  Install log: $PRIMARY_LOG${NC}"
    else
        stop_spinner 1 "Primary install failed ‚Äì attempting fallback"
        echo -e "${BLUE}üîç Last 15 lines from primary log:${NC}"
        tail -n 15 "$PRIMARY_LOG"
        start_spinner "Installing fallback explicit packages"
        if pip install flask pymilvus sentence-transformers werkzeug python-dotenv pypdf python-docx chardet requests beautifulsoup4 google-api-python-client google-auth psycopg2-binary > "$FALLBACK_LOG" 2>&1; then
            stop_spinner 0 "Fallback dependencies installed"
            echo -e "${BLUE}‚ÑπÔ∏è  Logs: primary=$PRIMARY_LOG fallback=$FALLBACK_LOG${NC}"
        else
            stop_spinner 1 "Fallback installation failed"
            echo -e "${BLUE}üîç Last 25 lines from fallback log:${NC}"
            tail -n 25 "$FALLBACK_LOG"
            echo -e "${YELLOW}üí° Re-run ./setup.sh --verbose for full pip output${NC}"
            exit 1
        fi
    fi
fi

echo -e "${GREEN}üì¶ Python dependency phase complete${NC}"


# Install development dependencies (optional)
if ask_yes_no "Install development dependencies (pytest, black, flake8, mypy)?" "n"; then
    echo "üõ†Ô∏è Installing development dependencies..."
    DEV_LOG="$LOG_DIR/dev_deps_install.log"
    if [ "$VERBOSE" = true ]; then
        if pip install pytest pytest-cov black flake8 mypy isort 2>&1 | tee "$DEV_LOG"; then
            echo -e "${GREEN}‚úÖ Development dependencies installed${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Some dev dependencies failed (see $DEV_LOG)${NC}"
        fi
    else
        start_spinner "Installing dev dependencies"
        if pip install pytest pytest-cov black flake8 mypy isort > "$DEV_LOG" 2>&1; then
            stop_spinner 0 "Dev dependencies installed"
            echo -e "${BLUE}‚ÑπÔ∏è  Log: $DEV_LOG${NC}"
        else
            stop_spinner 1 "Some dev dependencies failed"
            echo -e "${BLUE}üîç Last 20 lines:${NC}"
            tail -n 20 "$DEV_LOG"
        fi
    fi
fi

# (Directory setup moved earlier; block retained intentionally blank to preserve script flow)


# Check environment file
echo ""
echo "ÔøΩ Environment configuration..."
if [ ! -f ".env" ]; then
    if [ -f ".env.example" ]; then
        if ask_yes_no "Copy .env.example to .env for configuration?" "y"; then
            cp .env.example .env
            echo -e "${GREEN}‚úÖ .env file created from example${NC}"
            echo -e "${YELLOW}üí° You may want to customize .env for your environment${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  .env file not found. Using default configuration.${NC}"
            echo -e "${BLUE}ÔøΩ You can copy .env.example to .env later if needed${NC}"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  No .env or .env.example file found. Using default configuration.${NC}"
    fi
else
    echo -e "${GREEN}‚úÖ .env file already exists${NC}"
fi

echo ""
echo -e "${GREEN}‚úÖ Environment setup complete!${NC}"
echo ""
echo "üê≥ Docker Container Setup"
echo "========================="

# Check if Docker is available and running
check_docker() {
    if ! command -v docker >/dev/null 2>&1; then
        echo -e "${RED}‚ùå Docker is not installed.${NC}"
        echo "   Please install Docker and try again."
        return 1
    fi
    
    if ! docker info >/dev/null 2>&1; then
        echo -e "${RED}‚ùå Docker is not running.${NC}"
        echo "   Please start Docker and try again."
        echo -e "${BLUE}üí° You can start containers later with: docker compose up -d${NC}"
        return 1
    fi
    
    echo -e "${GREEN}‚úÖ Docker is available and running${NC}"
    return 0
}

# Function to start specific services
start_services() {
    local services="$1"
    local description="$2"
    
    echo "üöÄ Starting $description..."
    docker compose up $services -d
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $description started successfully!${NC}"
        return 0
    else
        echo -e "${RED}‚ùå Failed to start $description${NC}"
        return 1
    fi
}

# Main Docker setup logic
if check_docker; then
    if [ "$AUTO_YES" = true ]; then
        # --all flag: Install everything
        echo -e "${BLUE}ü§ñ Auto-installing all containers...${NC}"
        start_services "postgres milvus ollama webui" "all services (PostgreSQL, Milvus, Ollama, WebUI)"
        
        if [ $? -eq 0 ]; then
            echo ""
            echo -e "${GREEN}üéâ All services are running!${NC}"
            echo -e "${BLUE}üåê RAG Knowledge Base Web interface: http://localhost:3000${NC}"
            echo -e "${BLUE}üêò PostgreSQL: localhost:5432${NC}"
            echo -e "${BLUE}üîç Milvus: localhost:19530${NC}"
            echo -e "${BLUE}ü§ñ Ollama: localhost:11434${NC}"
        fi
        
    elif [ "$DEV_MODE" = true ]; then
        # --dev flag: Install only databases, skip webui
        echo -e "${YELLOW}üë®‚Äçüíª Development mode: Installing database containers only...${NC}"
        start_services "postgres milvus" "database services (PostgreSQL, Milvus)"
        
        if [ $? -eq 0 ]; then
            echo ""
            echo -e "${GREEN}üéâ Database services are running!${NC}"
            echo -e "${YELLOW}üí° WebUI container skipped for local development${NC}"
            echo -e "${BLUE}üêò PostgreSQL: localhost:5432${NC}"
            echo -e "${BLUE}üîç Milvus: localhost:19530${NC}"
            echo ""
            echo -e "${BLUE}To start local development:${NC}"
            echo "   source .venv/bin/activate"
            echo "   ./start.sh"
        fi
        
        echo ""
        
        # Ollama
        if ask_yes_no "Install and start Ollama local LLM server?" "n"; then
            start_services "ollama" "Ollama container"
            if [ $? -eq 0 ]; then
                echo -e "${BLUE}üîó Ollama: localhost:11434${NC}"
                echo -e "${BLUE}ü§ñ Local LLM server ready for model downloads${NC}"
            fi
        else
            echo -e "${YELLOW}‚è≠Ô∏è  Ollama skipped${NC}"
        fi

    else
        # Interactive mode: Ask for each service
        echo -e "${BLUE}üîß Interactive container setup...${NC}"
        echo "   You'll be asked about each service individually."
        echo "   Each service is optional and independent."
        echo ""
        
        # PostgreSQL
        if ask_yes_no "Install and start PostgreSQL metadata database?" "y"; then
            start_services "postgres" "PostgreSQL container"
            if [ $? -eq 0 ]; then
                echo -e "${BLUE}üîó PostgreSQL: localhost:5432${NC}"
                echo -e "${BLUE}üìä Database: rag_metadata, User: rag_user${NC}"
            fi
        else
            echo -e "${YELLOW}‚è≠Ô∏è  PostgreSQL skipped${NC}"
        fi
        
        echo ""
        
        # Milvus
        if ask_yes_no "Install and start Milvus vector database?" "y"; then
            start_services "milvus" "Milvus container"
            if [ $? -eq 0 ]; then
                echo -e "${BLUE}üîó Milvus: localhost:19530${NC}"
            fi
        else
            echo -e "${YELLOW}‚è≠Ô∏è  Milvus skipped${NC}"
        fi
        
        echo ""
        
        # Ollama
        if ask_yes_no "Install and start Ollama local LLM server?" "n"; then
            start_services "ollama" "Ollama container"
            if [ $? -eq 0 ]; then
                echo -e "${BLUE}üîó Ollama: localhost:11434${NC}"
                echo -e "${BLUE}ü§ñ Local LLM server ready for model downloads${NC}"
            fi
        else
            echo -e "${YELLOW}‚è≠Ô∏è  Ollama skipped${NC}"
        fi
        
        echo ""
        
        # WebUI
        if ask_yes_no "Install and start RAG Knowledge Base WebUI container?" "n"; then
            start_services "webui" "RAG Knowledge Base WebUI container"
            if [ $? -eq 0 ]; then
                echo -e "${BLUE}üåê RAG Knowledge Base Web interface: http://localhost:3000${NC}"
            fi
        else
            echo -e "${YELLOW}‚è≠Ô∏è  WebUI skipped (good for local development)${NC}"
        fi
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Docker setup skipped due to issues above${NC}"
    echo -e "${BLUE}üí° You can start containers manually later with:${NC}"
    echo "   docker compose up -d                              # All services"
    echo "   docker compose up postgres milvus -d              # Database services only"
    echo "   docker compose up postgres milvus ollama -d       # Databases + Ollama"
    echo "   docker compose up ollama -d                       # Ollama only"
fi

echo ""
echo "üéâ Setup Complete!"
echo "=================="

# Summary based on setup mode
if [ "$AUTO_YES" = true ]; then
    echo -e "${GREEN}‚úÖ Fully automated setup completed${NC}"
    echo -e "${BLUE}üåê Ready to use: http://localhost:3000${NC}"
elif [ "$DEV_MODE" = true ]; then
    echo -e "${GREEN}‚úÖ Development environment ready${NC}"
    echo -e "${YELLOW}üíª Start local development with: python app.py${NC}"
else
    echo -e "${GREEN}‚úÖ Interactive setup completed${NC}"
fi

echo ""
echo "üìä What was installed:"
echo "   ‚úÖ Python virtual environment (.venv)"
echo "   ‚úÖ All Python dependencies"
echo "   ‚úÖ Required directories and structure"
if [ "$DEV_MODE" != true ]; then
    echo "   ‚úÖ Docker containers (as selected)"
fi

echo ""
echo "üöÄ Next Steps:"

if [ "$DEV_MODE" = true ]; then
    echo -e "${YELLOW}Development Mode - Local Execution:${NC}"
    echo -e "   1. Activate environment: ${BLUE}source .venv/bin/activate${NC}"
    echo -e "   2. Start RAG Knowledge Base application: ${BLUE}./start.sh${NC}"
    echo -e "   3. Open browser: ${BLUE}http://localhost:3000${NC}"
elif [ "$AUTO_YES" = true ]; then
    echo -e "${GREEN}Production Mode - All containers running:${NC}"
    echo "   üåê RAG Knowledge Base Web interface: ${BLUE}http://localhost:3000${NC}"
    echo "   üìä Application ready to use immediately!"
else
    echo -e "${BLUE}Manual Options:${NC}"
    echo "   üê≥ Start all containers: ${BLUE}docker compose up -d${NC}"
    echo "   üíª Or run locally: ${BLUE}source .venv/bin/activate && python app.py${NC}"
fi

echo ""
echo "üîß Useful Commands:"
echo -e "   ${BLUE}./status.sh${NC}        # Check project status"
echo -e "   ${BLUE}./start.sh${NC}        # Start application"
echo -e "   ${BLUE}./setup.sh --help${NC}  # Show setup options"
echo -e "   ${BLUE}./uninstall.sh${NC}     # Complete removal"
echo ""
echo "üèóÔ∏è  Container Management:"
echo -e "   ${BLUE}docker compose up -d${NC}                        # Start all services"
echo -e "   ${BLUE}docker compose up postgres milvus -d${NC}        # Database services only"
echo -e "   ${BLUE}docker compose up postgres milvus ollama -d${NC} # Databases + Ollama"
echo -e "   ${BLUE}docker compose down${NC}                         # Stop all services"
echo -e "   ${BLUE}docker compose logs -f webui${NC}                # View webui logs"

echo ""
echo "üìö Key Components:"
echo "   üêò PostgreSQL (metadata): localhost:5432"
echo "   üîç Milvus (vectors): localhost:19530"
echo "   ü§ñ Ollama (local LLM): localhost:11434"
echo "   üåê Web Interface: localhost:3000"
echo "   üìÅ Document uploads: ./uploaded/"
echo "   üìÅ Processing staging: ./staging/"
echo "   üìä Logs: ./logs/"

echo ""
echo -e "${GREEN}üéØ RAG Knowledgebase Manager is ready!${NC}"

# Test connection if containers are running
if command -v docker >/dev/null 2>&1 && docker info >/dev/null 2>&1; then
    if docker compose ps --services --filter "status=running" | grep -q "postgres\|milvus"; then
        echo ""
        echo "üß™ Quick system test..."
        if [ -f "test_postgres.py" ]; then
            echo "   Testing PostgreSQL connection..."
            python test_postgres.py >/dev/null 2>&1 && echo -e "   ${GREEN}‚úÖ PostgreSQL connection OK${NC}" || echo -e "   ${YELLOW}‚ö†Ô∏è  PostgreSQL test failed${NC}"
        fi
    fi
fi
